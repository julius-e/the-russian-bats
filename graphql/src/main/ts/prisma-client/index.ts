// tslint:disable
// Code generated by Prisma (prisma@1.26.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql';
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model,
} from 'prisma-client-lib';
import { typeDefs } from './prisma-schema';

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  batting: (where?: BattingWhereInput) => Promise<boolean>;
  person: (where?: PersonWhereInput) => Promise<boolean>;
  pitching: (where?: PitchingWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any },
  ) => Promise<T>;

  /**
   * Queries
   */

  battings: (args?: {
    where?: BattingWhereInput;
    orderBy?: BattingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Batting>;
  battingsConnection: (args?: {
    where?: BattingWhereInput;
    orderBy?: BattingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BattingConnectionPromise;
  person: (where: PersonWhereUniqueInput) => PersonPromise;
  persons: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Person>;
  personsConnection: (args?: {
    where?: PersonWhereInput;
    orderBy?: PersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PersonConnectionPromise;
  pitchings: (args?: {
    where?: PitchingWhereInput;
    orderBy?: PitchingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Pitching>;
  pitchingsConnection: (args?: {
    where?: PitchingWhereInput;
    orderBy?: PitchingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PitchingConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBatting: (data: BattingCreateInput) => BattingPromise;
  updateManyBattings: (args: {
    data: BattingUpdateManyMutationInput;
    where?: BattingWhereInput;
  }) => BatchPayloadPromise;
  deleteManyBattings: (where?: BattingWhereInput) => BatchPayloadPromise;
  createPerson: (data: PersonCreateInput) => PersonPromise;
  updatePerson: (args: {
    data: PersonUpdateInput;
    where: PersonWhereUniqueInput;
  }) => PersonPromise;
  updateManyPersons: (args: {
    data: PersonUpdateManyMutationInput;
    where?: PersonWhereInput;
  }) => BatchPayloadPromise;
  upsertPerson: (args: {
    where: PersonWhereUniqueInput;
    create: PersonCreateInput;
    update: PersonUpdateInput;
  }) => PersonPromise;
  deletePerson: (where: PersonWhereUniqueInput) => PersonPromise;
  deleteManyPersons: (where?: PersonWhereInput) => BatchPayloadPromise;
  createPitching: (data: PitchingCreateInput) => PitchingPromise;
  updateManyPitchings: (args: {
    data: PitchingUpdateManyMutationInput;
    where?: PitchingWhereInput;
  }) => BatchPayloadPromise;
  deleteManyPitchings: (where?: PitchingWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  batting: (
    where?: BattingSubscriptionWhereInput,
  ) => BattingSubscriptionPayloadSubscription;
  person: (
    where?: PersonSubscriptionWhereInput,
  ) => PersonSubscriptionPayloadSubscription;
  pitching: (
    where?: PitchingSubscriptionWhereInput,
  ) => PitchingSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PitchingOrderByInput =
  | 'playerID_ASC'
  | 'playerID_DESC'
  | 'yearID_ASC'
  | 'yearID_DESC'
  | 'stint_ASC'
  | 'stint_DESC'
  | 'teamID_ASC'
  | 'teamID_DESC'
  | 'lgID_ASC'
  | 'lgID_DESC'
  | 'W_ASC'
  | 'W_DESC'
  | 'L_ASC'
  | 'L_DESC'
  | 'G_ASC'
  | 'G_DESC'
  | 'GS_ASC'
  | 'GS_DESC'
  | 'CG_ASC'
  | 'CG_DESC'
  | 'SHO_ASC'
  | 'SHO_DESC'
  | 'SV_ASC'
  | 'SV_DESC'
  | 'IPouts_ASC'
  | 'IPouts_DESC'
  | 'H_ASC'
  | 'H_DESC'
  | 'ER_ASC'
  | 'ER_DESC'
  | 'HR_ASC'
  | 'HR_DESC'
  | 'BB_ASC'
  | 'BB_DESC'
  | 'SO_ASC'
  | 'SO_DESC'
  | 'BAOpp_ASC'
  | 'BAOpp_DESC'
  | 'ERA_ASC'
  | 'ERA_DESC'
  | 'IBB_ASC'
  | 'IBB_DESC'
  | 'WP_ASC'
  | 'WP_DESC'
  | 'HBP_ASC'
  | 'HBP_DESC'
  | 'BK_ASC'
  | 'BK_DESC'
  | 'BFP_ASC'
  | 'BFP_DESC'
  | 'GF_ASC'
  | 'GF_DESC'
  | 'R_ASC'
  | 'R_DESC'
  | 'SH_ASC'
  | 'SH_DESC'
  | 'SF_ASC'
  | 'SF_DESC'
  | 'GIDP_ASC'
  | 'GIDP_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type BattingOrderByInput =
  | 'playerID_ASC'
  | 'playerID_DESC'
  | 'yearID_ASC'
  | 'yearID_DESC'
  | 'stint_ASC'
  | 'stint_DESC'
  | 'teamID_ASC'
  | 'teamID_DESC'
  | 'lgID_ASC'
  | 'lgID_DESC'
  | 'G_ASC'
  | 'G_DESC'
  | 'AB_ASC'
  | 'AB_DESC'
  | 'R_ASC'
  | 'R_DESC'
  | 'H_ASC'
  | 'H_DESC'
  | 'Double_ASC'
  | 'Double_DESC'
  | 'Triple_ASC'
  | 'Triple_DESC'
  | 'HR_ASC'
  | 'HR_DESC'
  | 'RBI_ASC'
  | 'RBI_DESC'
  | 'SB_ASC'
  | 'SB_DESC'
  | 'CS_ASC'
  | 'CS_DESC'
  | 'BB_ASC'
  | 'BB_DESC'
  | 'SO_ASC'
  | 'SO_DESC'
  | 'IBB_ASC'
  | 'IBB_DESC'
  | 'HBP_ASC'
  | 'HBP_DESC'
  | 'SH_ASC'
  | 'SH_DESC'
  | 'SF_ASC'
  | 'SF_DESC'
  | 'GIDP_ASC'
  | 'GIDP_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type PersonOrderByInput =
  | 'playerID_ASC'
  | 'playerID_DESC'
  | 'birthYear_ASC'
  | 'birthYear_DESC'
  | 'birthMonth_ASC'
  | 'birthMonth_DESC'
  | 'birthDay_ASC'
  | 'birthDay_DESC'
  | 'birthCountry_ASC'
  | 'birthCountry_DESC'
  | 'birthState_ASC'
  | 'birthState_DESC'
  | 'birthCity_ASC'
  | 'birthCity_DESC'
  | 'deathYear_ASC'
  | 'deathYear_DESC'
  | 'deathMonth_ASC'
  | 'deathMonth_DESC'
  | 'deathDay_ASC'
  | 'deathDay_DESC'
  | 'deathCountry_ASC'
  | 'deathCountry_DESC'
  | 'deathState_ASC'
  | 'deathState_DESC'
  | 'deathCity_ASC'
  | 'deathCity_DESC'
  | 'nameFirst_ASC'
  | 'nameFirst_DESC'
  | 'nameLast_ASC'
  | 'nameLast_DESC'
  | 'nameGiven_ASC'
  | 'nameGiven_DESC'
  | 'weight_ASC'
  | 'weight_DESC'
  | 'height_ASC'
  | 'height_DESC'
  | 'bats_ASC'
  | 'bats_DESC'
  | 'throws_ASC'
  | 'throws_DESC'
  | 'debut_ASC'
  | 'debut_DESC'
  | 'finalGame_ASC'
  | 'finalGame_DESC'
  | 'retroID_ASC'
  | 'retroID_DESC'
  | 'bbrefID_ASC'
  | 'bbrefID_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED';

export interface BattingUpdateManyMutationInput {
  playerID?: ID_Input;
  yearID?: String;
  stint?: String;
  teamID?: String;
  lgID?: String;
  G?: Int;
  AB?: Int;
  R?: Int;
  H?: Int;
  Double?: Int;
  Triple?: Int;
  HR?: Int;
  RBI?: Int;
  SB?: Int;
  CS?: Int;
  BB?: Int;
  SO?: Int;
  IBB?: Int;
  HBP?: Int;
  SH?: Int;
  SF?: Int;
  GIDP?: Int;
}

export interface BattingWhereInput {
  playerID?: ID_Input;
  playerID_not?: ID_Input;
  playerID_in?: ID_Input[] | ID_Input;
  playerID_not_in?: ID_Input[] | ID_Input;
  playerID_lt?: ID_Input;
  playerID_lte?: ID_Input;
  playerID_gt?: ID_Input;
  playerID_gte?: ID_Input;
  playerID_contains?: ID_Input;
  playerID_not_contains?: ID_Input;
  playerID_starts_with?: ID_Input;
  playerID_not_starts_with?: ID_Input;
  playerID_ends_with?: ID_Input;
  playerID_not_ends_with?: ID_Input;
  yearID?: String;
  yearID_not?: String;
  yearID_in?: String[] | String;
  yearID_not_in?: String[] | String;
  yearID_lt?: String;
  yearID_lte?: String;
  yearID_gt?: String;
  yearID_gte?: String;
  yearID_contains?: String;
  yearID_not_contains?: String;
  yearID_starts_with?: String;
  yearID_not_starts_with?: String;
  yearID_ends_with?: String;
  yearID_not_ends_with?: String;
  stint?: String;
  stint_not?: String;
  stint_in?: String[] | String;
  stint_not_in?: String[] | String;
  stint_lt?: String;
  stint_lte?: String;
  stint_gt?: String;
  stint_gte?: String;
  stint_contains?: String;
  stint_not_contains?: String;
  stint_starts_with?: String;
  stint_not_starts_with?: String;
  stint_ends_with?: String;
  stint_not_ends_with?: String;
  teamID?: String;
  teamID_not?: String;
  teamID_in?: String[] | String;
  teamID_not_in?: String[] | String;
  teamID_lt?: String;
  teamID_lte?: String;
  teamID_gt?: String;
  teamID_gte?: String;
  teamID_contains?: String;
  teamID_not_contains?: String;
  teamID_starts_with?: String;
  teamID_not_starts_with?: String;
  teamID_ends_with?: String;
  teamID_not_ends_with?: String;
  lgID?: String;
  lgID_not?: String;
  lgID_in?: String[] | String;
  lgID_not_in?: String[] | String;
  lgID_lt?: String;
  lgID_lte?: String;
  lgID_gt?: String;
  lgID_gte?: String;
  lgID_contains?: String;
  lgID_not_contains?: String;
  lgID_starts_with?: String;
  lgID_not_starts_with?: String;
  lgID_ends_with?: String;
  lgID_not_ends_with?: String;
  G?: Int;
  G_not?: Int;
  G_in?: Int[] | Int;
  G_not_in?: Int[] | Int;
  G_lt?: Int;
  G_lte?: Int;
  G_gt?: Int;
  G_gte?: Int;
  AB?: Int;
  AB_not?: Int;
  AB_in?: Int[] | Int;
  AB_not_in?: Int[] | Int;
  AB_lt?: Int;
  AB_lte?: Int;
  AB_gt?: Int;
  AB_gte?: Int;
  R?: Int;
  R_not?: Int;
  R_in?: Int[] | Int;
  R_not_in?: Int[] | Int;
  R_lt?: Int;
  R_lte?: Int;
  R_gt?: Int;
  R_gte?: Int;
  H?: Int;
  H_not?: Int;
  H_in?: Int[] | Int;
  H_not_in?: Int[] | Int;
  H_lt?: Int;
  H_lte?: Int;
  H_gt?: Int;
  H_gte?: Int;
  Double?: Int;
  Double_not?: Int;
  Double_in?: Int[] | Int;
  Double_not_in?: Int[] | Int;
  Double_lt?: Int;
  Double_lte?: Int;
  Double_gt?: Int;
  Double_gte?: Int;
  Triple?: Int;
  Triple_not?: Int;
  Triple_in?: Int[] | Int;
  Triple_not_in?: Int[] | Int;
  Triple_lt?: Int;
  Triple_lte?: Int;
  Triple_gt?: Int;
  Triple_gte?: Int;
  HR?: Int;
  HR_not?: Int;
  HR_in?: Int[] | Int;
  HR_not_in?: Int[] | Int;
  HR_lt?: Int;
  HR_lte?: Int;
  HR_gt?: Int;
  HR_gte?: Int;
  RBI?: Int;
  RBI_not?: Int;
  RBI_in?: Int[] | Int;
  RBI_not_in?: Int[] | Int;
  RBI_lt?: Int;
  RBI_lte?: Int;
  RBI_gt?: Int;
  RBI_gte?: Int;
  SB?: Int;
  SB_not?: Int;
  SB_in?: Int[] | Int;
  SB_not_in?: Int[] | Int;
  SB_lt?: Int;
  SB_lte?: Int;
  SB_gt?: Int;
  SB_gte?: Int;
  CS?: Int;
  CS_not?: Int;
  CS_in?: Int[] | Int;
  CS_not_in?: Int[] | Int;
  CS_lt?: Int;
  CS_lte?: Int;
  CS_gt?: Int;
  CS_gte?: Int;
  BB?: Int;
  BB_not?: Int;
  BB_in?: Int[] | Int;
  BB_not_in?: Int[] | Int;
  BB_lt?: Int;
  BB_lte?: Int;
  BB_gt?: Int;
  BB_gte?: Int;
  SO?: Int;
  SO_not?: Int;
  SO_in?: Int[] | Int;
  SO_not_in?: Int[] | Int;
  SO_lt?: Int;
  SO_lte?: Int;
  SO_gt?: Int;
  SO_gte?: Int;
  IBB?: Int;
  IBB_not?: Int;
  IBB_in?: Int[] | Int;
  IBB_not_in?: Int[] | Int;
  IBB_lt?: Int;
  IBB_lte?: Int;
  IBB_gt?: Int;
  IBB_gte?: Int;
  HBP?: Int;
  HBP_not?: Int;
  HBP_in?: Int[] | Int;
  HBP_not_in?: Int[] | Int;
  HBP_lt?: Int;
  HBP_lte?: Int;
  HBP_gt?: Int;
  HBP_gte?: Int;
  SH?: Int;
  SH_not?: Int;
  SH_in?: Int[] | Int;
  SH_not_in?: Int[] | Int;
  SH_lt?: Int;
  SH_lte?: Int;
  SH_gt?: Int;
  SH_gte?: Int;
  SF?: Int;
  SF_not?: Int;
  SF_in?: Int[] | Int;
  SF_not_in?: Int[] | Int;
  SF_lt?: Int;
  SF_lte?: Int;
  SF_gt?: Int;
  SF_gte?: Int;
  GIDP?: Int;
  GIDP_not?: Int;
  GIDP_in?: Int[] | Int;
  GIDP_not_in?: Int[] | Int;
  GIDP_lt?: Int;
  GIDP_lte?: Int;
  GIDP_gt?: Int;
  GIDP_gte?: Int;
  AND?: BattingWhereInput[] | BattingWhereInput;
  OR?: BattingWhereInput[] | BattingWhereInput;
  NOT?: BattingWhereInput[] | BattingWhereInput;
}

export interface PitchingScalarWhereInput {
  playerID?: ID_Input;
  playerID_not?: ID_Input;
  playerID_in?: ID_Input[] | ID_Input;
  playerID_not_in?: ID_Input[] | ID_Input;
  playerID_lt?: ID_Input;
  playerID_lte?: ID_Input;
  playerID_gt?: ID_Input;
  playerID_gte?: ID_Input;
  playerID_contains?: ID_Input;
  playerID_not_contains?: ID_Input;
  playerID_starts_with?: ID_Input;
  playerID_not_starts_with?: ID_Input;
  playerID_ends_with?: ID_Input;
  playerID_not_ends_with?: ID_Input;
  yearID?: String;
  yearID_not?: String;
  yearID_in?: String[] | String;
  yearID_not_in?: String[] | String;
  yearID_lt?: String;
  yearID_lte?: String;
  yearID_gt?: String;
  yearID_gte?: String;
  yearID_contains?: String;
  yearID_not_contains?: String;
  yearID_starts_with?: String;
  yearID_not_starts_with?: String;
  yearID_ends_with?: String;
  yearID_not_ends_with?: String;
  stint?: String;
  stint_not?: String;
  stint_in?: String[] | String;
  stint_not_in?: String[] | String;
  stint_lt?: String;
  stint_lte?: String;
  stint_gt?: String;
  stint_gte?: String;
  stint_contains?: String;
  stint_not_contains?: String;
  stint_starts_with?: String;
  stint_not_starts_with?: String;
  stint_ends_with?: String;
  stint_not_ends_with?: String;
  teamID?: String;
  teamID_not?: String;
  teamID_in?: String[] | String;
  teamID_not_in?: String[] | String;
  teamID_lt?: String;
  teamID_lte?: String;
  teamID_gt?: String;
  teamID_gte?: String;
  teamID_contains?: String;
  teamID_not_contains?: String;
  teamID_starts_with?: String;
  teamID_not_starts_with?: String;
  teamID_ends_with?: String;
  teamID_not_ends_with?: String;
  lgID?: String;
  lgID_not?: String;
  lgID_in?: String[] | String;
  lgID_not_in?: String[] | String;
  lgID_lt?: String;
  lgID_lte?: String;
  lgID_gt?: String;
  lgID_gte?: String;
  lgID_contains?: String;
  lgID_not_contains?: String;
  lgID_starts_with?: String;
  lgID_not_starts_with?: String;
  lgID_ends_with?: String;
  lgID_not_ends_with?: String;
  W?: Int;
  W_not?: Int;
  W_in?: Int[] | Int;
  W_not_in?: Int[] | Int;
  W_lt?: Int;
  W_lte?: Int;
  W_gt?: Int;
  W_gte?: Int;
  L?: Int;
  L_not?: Int;
  L_in?: Int[] | Int;
  L_not_in?: Int[] | Int;
  L_lt?: Int;
  L_lte?: Int;
  L_gt?: Int;
  L_gte?: Int;
  G?: Int;
  G_not?: Int;
  G_in?: Int[] | Int;
  G_not_in?: Int[] | Int;
  G_lt?: Int;
  G_lte?: Int;
  G_gt?: Int;
  G_gte?: Int;
  GS?: Int;
  GS_not?: Int;
  GS_in?: Int[] | Int;
  GS_not_in?: Int[] | Int;
  GS_lt?: Int;
  GS_lte?: Int;
  GS_gt?: Int;
  GS_gte?: Int;
  CG?: Int;
  CG_not?: Int;
  CG_in?: Int[] | Int;
  CG_not_in?: Int[] | Int;
  CG_lt?: Int;
  CG_lte?: Int;
  CG_gt?: Int;
  CG_gte?: Int;
  SHO?: Int;
  SHO_not?: Int;
  SHO_in?: Int[] | Int;
  SHO_not_in?: Int[] | Int;
  SHO_lt?: Int;
  SHO_lte?: Int;
  SHO_gt?: Int;
  SHO_gte?: Int;
  SV?: Int;
  SV_not?: Int;
  SV_in?: Int[] | Int;
  SV_not_in?: Int[] | Int;
  SV_lt?: Int;
  SV_lte?: Int;
  SV_gt?: Int;
  SV_gte?: Int;
  IPouts?: Int;
  IPouts_not?: Int;
  IPouts_in?: Int[] | Int;
  IPouts_not_in?: Int[] | Int;
  IPouts_lt?: Int;
  IPouts_lte?: Int;
  IPouts_gt?: Int;
  IPouts_gte?: Int;
  H?: Int;
  H_not?: Int;
  H_in?: Int[] | Int;
  H_not_in?: Int[] | Int;
  H_lt?: Int;
  H_lte?: Int;
  H_gt?: Int;
  H_gte?: Int;
  ER?: Int;
  ER_not?: Int;
  ER_in?: Int[] | Int;
  ER_not_in?: Int[] | Int;
  ER_lt?: Int;
  ER_lte?: Int;
  ER_gt?: Int;
  ER_gte?: Int;
  HR?: Int;
  HR_not?: Int;
  HR_in?: Int[] | Int;
  HR_not_in?: Int[] | Int;
  HR_lt?: Int;
  HR_lte?: Int;
  HR_gt?: Int;
  HR_gte?: Int;
  BB?: Int;
  BB_not?: Int;
  BB_in?: Int[] | Int;
  BB_not_in?: Int[] | Int;
  BB_lt?: Int;
  BB_lte?: Int;
  BB_gt?: Int;
  BB_gte?: Int;
  SO?: Int;
  SO_not?: Int;
  SO_in?: Int[] | Int;
  SO_not_in?: Int[] | Int;
  SO_lt?: Int;
  SO_lte?: Int;
  SO_gt?: Int;
  SO_gte?: Int;
  BAOpp?: Int;
  BAOpp_not?: Int;
  BAOpp_in?: Int[] | Int;
  BAOpp_not_in?: Int[] | Int;
  BAOpp_lt?: Int;
  BAOpp_lte?: Int;
  BAOpp_gt?: Int;
  BAOpp_gte?: Int;
  ERA?: Float;
  ERA_not?: Float;
  ERA_in?: Float[] | Float;
  ERA_not_in?: Float[] | Float;
  ERA_lt?: Float;
  ERA_lte?: Float;
  ERA_gt?: Float;
  ERA_gte?: Float;
  IBB?: Int;
  IBB_not?: Int;
  IBB_in?: Int[] | Int;
  IBB_not_in?: Int[] | Int;
  IBB_lt?: Int;
  IBB_lte?: Int;
  IBB_gt?: Int;
  IBB_gte?: Int;
  WP?: Int;
  WP_not?: Int;
  WP_in?: Int[] | Int;
  WP_not_in?: Int[] | Int;
  WP_lt?: Int;
  WP_lte?: Int;
  WP_gt?: Int;
  WP_gte?: Int;
  HBP?: Int;
  HBP_not?: Int;
  HBP_in?: Int[] | Int;
  HBP_not_in?: Int[] | Int;
  HBP_lt?: Int;
  HBP_lte?: Int;
  HBP_gt?: Int;
  HBP_gte?: Int;
  BK?: Int;
  BK_not?: Int;
  BK_in?: Int[] | Int;
  BK_not_in?: Int[] | Int;
  BK_lt?: Int;
  BK_lte?: Int;
  BK_gt?: Int;
  BK_gte?: Int;
  BFP?: Int;
  BFP_not?: Int;
  BFP_in?: Int[] | Int;
  BFP_not_in?: Int[] | Int;
  BFP_lt?: Int;
  BFP_lte?: Int;
  BFP_gt?: Int;
  BFP_gte?: Int;
  GF?: Int;
  GF_not?: Int;
  GF_in?: Int[] | Int;
  GF_not_in?: Int[] | Int;
  GF_lt?: Int;
  GF_lte?: Int;
  GF_gt?: Int;
  GF_gte?: Int;
  R?: Int;
  R_not?: Int;
  R_in?: Int[] | Int;
  R_not_in?: Int[] | Int;
  R_lt?: Int;
  R_lte?: Int;
  R_gt?: Int;
  R_gte?: Int;
  SH?: Int;
  SH_not?: Int;
  SH_in?: Int[] | Int;
  SH_not_in?: Int[] | Int;
  SH_lt?: Int;
  SH_lte?: Int;
  SH_gt?: Int;
  SH_gte?: Int;
  SF?: Int;
  SF_not?: Int;
  SF_in?: Int[] | Int;
  SF_not_in?: Int[] | Int;
  SF_lt?: Int;
  SF_lte?: Int;
  SF_gt?: Int;
  SF_gte?: Int;
  GIDP?: Int;
  GIDP_not?: Int;
  GIDP_in?: Int[] | Int;
  GIDP_not_in?: Int[] | Int;
  GIDP_lt?: Int;
  GIDP_lte?: Int;
  GIDP_gt?: Int;
  GIDP_gte?: Int;
  AND?: PitchingScalarWhereInput[] | PitchingScalarWhereInput;
  OR?: PitchingScalarWhereInput[] | PitchingScalarWhereInput;
  NOT?: PitchingScalarWhereInput[] | PitchingScalarWhereInput;
}

export interface BattingCreateManyInput {
  create?: BattingCreateInput[] | BattingCreateInput;
}

export interface PitchingUpdateManyInput {
  create?: PitchingCreateInput[] | PitchingCreateInput;
  deleteMany?: PitchingScalarWhereInput[] | PitchingScalarWhereInput;
  updateMany?:
    | PitchingUpdateManyWithWhereNestedInput[]
    | PitchingUpdateManyWithWhereNestedInput;
}

export interface PersonCreateInput {
  playerID: ID_Input;
  birthYear?: String;
  birthMonth?: String;
  birthDay?: String;
  birthCountry?: String;
  birthState?: String;
  birthCity?: String;
  deathYear?: String;
  deathMonth?: String;
  deathDay?: String;
  deathCountry?: String;
  deathState?: String;
  deathCity?: String;
  nameFirst?: String;
  nameLast?: String;
  nameGiven?: String;
  weight?: String;
  height?: String;
  bats?: String;
  throws?: String;
  debut?: String;
  finalGame?: String;
  retroID?: String;
  bbrefID?: String;
  batting?: BattingCreateManyInput;
  pitching?: PitchingCreateManyInput;
}

export interface BattingUpdateManyDataInput {
  playerID?: ID_Input;
  yearID?: String;
  stint?: String;
  teamID?: String;
  lgID?: String;
  G?: Int;
  AB?: Int;
  R?: Int;
  H?: Int;
  Double?: Int;
  Triple?: Int;
  HR?: Int;
  RBI?: Int;
  SB?: Int;
  CS?: Int;
  BB?: Int;
  SO?: Int;
  IBB?: Int;
  HBP?: Int;
  SH?: Int;
  SF?: Int;
  GIDP?: Int;
}

export interface PersonSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PersonWhereInput;
  AND?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
  OR?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
  NOT?: PersonSubscriptionWhereInput[] | PersonSubscriptionWhereInput;
}

export interface BattingUpdateManyWithWhereNestedInput {
  where: BattingScalarWhereInput;
  data: BattingUpdateManyDataInput;
}

export type PersonWhereUniqueInput = AtLeastOne<{
  playerID: ID_Input;
}>;

export interface BattingScalarWhereInput {
  playerID?: ID_Input;
  playerID_not?: ID_Input;
  playerID_in?: ID_Input[] | ID_Input;
  playerID_not_in?: ID_Input[] | ID_Input;
  playerID_lt?: ID_Input;
  playerID_lte?: ID_Input;
  playerID_gt?: ID_Input;
  playerID_gte?: ID_Input;
  playerID_contains?: ID_Input;
  playerID_not_contains?: ID_Input;
  playerID_starts_with?: ID_Input;
  playerID_not_starts_with?: ID_Input;
  playerID_ends_with?: ID_Input;
  playerID_not_ends_with?: ID_Input;
  yearID?: String;
  yearID_not?: String;
  yearID_in?: String[] | String;
  yearID_not_in?: String[] | String;
  yearID_lt?: String;
  yearID_lte?: String;
  yearID_gt?: String;
  yearID_gte?: String;
  yearID_contains?: String;
  yearID_not_contains?: String;
  yearID_starts_with?: String;
  yearID_not_starts_with?: String;
  yearID_ends_with?: String;
  yearID_not_ends_with?: String;
  stint?: String;
  stint_not?: String;
  stint_in?: String[] | String;
  stint_not_in?: String[] | String;
  stint_lt?: String;
  stint_lte?: String;
  stint_gt?: String;
  stint_gte?: String;
  stint_contains?: String;
  stint_not_contains?: String;
  stint_starts_with?: String;
  stint_not_starts_with?: String;
  stint_ends_with?: String;
  stint_not_ends_with?: String;
  teamID?: String;
  teamID_not?: String;
  teamID_in?: String[] | String;
  teamID_not_in?: String[] | String;
  teamID_lt?: String;
  teamID_lte?: String;
  teamID_gt?: String;
  teamID_gte?: String;
  teamID_contains?: String;
  teamID_not_contains?: String;
  teamID_starts_with?: String;
  teamID_not_starts_with?: String;
  teamID_ends_with?: String;
  teamID_not_ends_with?: String;
  lgID?: String;
  lgID_not?: String;
  lgID_in?: String[] | String;
  lgID_not_in?: String[] | String;
  lgID_lt?: String;
  lgID_lte?: String;
  lgID_gt?: String;
  lgID_gte?: String;
  lgID_contains?: String;
  lgID_not_contains?: String;
  lgID_starts_with?: String;
  lgID_not_starts_with?: String;
  lgID_ends_with?: String;
  lgID_not_ends_with?: String;
  G?: Int;
  G_not?: Int;
  G_in?: Int[] | Int;
  G_not_in?: Int[] | Int;
  G_lt?: Int;
  G_lte?: Int;
  G_gt?: Int;
  G_gte?: Int;
  AB?: Int;
  AB_not?: Int;
  AB_in?: Int[] | Int;
  AB_not_in?: Int[] | Int;
  AB_lt?: Int;
  AB_lte?: Int;
  AB_gt?: Int;
  AB_gte?: Int;
  R?: Int;
  R_not?: Int;
  R_in?: Int[] | Int;
  R_not_in?: Int[] | Int;
  R_lt?: Int;
  R_lte?: Int;
  R_gt?: Int;
  R_gte?: Int;
  H?: Int;
  H_not?: Int;
  H_in?: Int[] | Int;
  H_not_in?: Int[] | Int;
  H_lt?: Int;
  H_lte?: Int;
  H_gt?: Int;
  H_gte?: Int;
  Double?: Int;
  Double_not?: Int;
  Double_in?: Int[] | Int;
  Double_not_in?: Int[] | Int;
  Double_lt?: Int;
  Double_lte?: Int;
  Double_gt?: Int;
  Double_gte?: Int;
  Triple?: Int;
  Triple_not?: Int;
  Triple_in?: Int[] | Int;
  Triple_not_in?: Int[] | Int;
  Triple_lt?: Int;
  Triple_lte?: Int;
  Triple_gt?: Int;
  Triple_gte?: Int;
  HR?: Int;
  HR_not?: Int;
  HR_in?: Int[] | Int;
  HR_not_in?: Int[] | Int;
  HR_lt?: Int;
  HR_lte?: Int;
  HR_gt?: Int;
  HR_gte?: Int;
  RBI?: Int;
  RBI_not?: Int;
  RBI_in?: Int[] | Int;
  RBI_not_in?: Int[] | Int;
  RBI_lt?: Int;
  RBI_lte?: Int;
  RBI_gt?: Int;
  RBI_gte?: Int;
  SB?: Int;
  SB_not?: Int;
  SB_in?: Int[] | Int;
  SB_not_in?: Int[] | Int;
  SB_lt?: Int;
  SB_lte?: Int;
  SB_gt?: Int;
  SB_gte?: Int;
  CS?: Int;
  CS_not?: Int;
  CS_in?: Int[] | Int;
  CS_not_in?: Int[] | Int;
  CS_lt?: Int;
  CS_lte?: Int;
  CS_gt?: Int;
  CS_gte?: Int;
  BB?: Int;
  BB_not?: Int;
  BB_in?: Int[] | Int;
  BB_not_in?: Int[] | Int;
  BB_lt?: Int;
  BB_lte?: Int;
  BB_gt?: Int;
  BB_gte?: Int;
  SO?: Int;
  SO_not?: Int;
  SO_in?: Int[] | Int;
  SO_not_in?: Int[] | Int;
  SO_lt?: Int;
  SO_lte?: Int;
  SO_gt?: Int;
  SO_gte?: Int;
  IBB?: Int;
  IBB_not?: Int;
  IBB_in?: Int[] | Int;
  IBB_not_in?: Int[] | Int;
  IBB_lt?: Int;
  IBB_lte?: Int;
  IBB_gt?: Int;
  IBB_gte?: Int;
  HBP?: Int;
  HBP_not?: Int;
  HBP_in?: Int[] | Int;
  HBP_not_in?: Int[] | Int;
  HBP_lt?: Int;
  HBP_lte?: Int;
  HBP_gt?: Int;
  HBP_gte?: Int;
  SH?: Int;
  SH_not?: Int;
  SH_in?: Int[] | Int;
  SH_not_in?: Int[] | Int;
  SH_lt?: Int;
  SH_lte?: Int;
  SH_gt?: Int;
  SH_gte?: Int;
  SF?: Int;
  SF_not?: Int;
  SF_in?: Int[] | Int;
  SF_not_in?: Int[] | Int;
  SF_lt?: Int;
  SF_lte?: Int;
  SF_gt?: Int;
  SF_gte?: Int;
  GIDP?: Int;
  GIDP_not?: Int;
  GIDP_in?: Int[] | Int;
  GIDP_not_in?: Int[] | Int;
  GIDP_lt?: Int;
  GIDP_lte?: Int;
  GIDP_gt?: Int;
  GIDP_gte?: Int;
  AND?: BattingScalarWhereInput[] | BattingScalarWhereInput;
  OR?: BattingScalarWhereInput[] | BattingScalarWhereInput;
  NOT?: BattingScalarWhereInput[] | BattingScalarWhereInput;
}

export interface PitchingWhereInput {
  playerID?: ID_Input;
  playerID_not?: ID_Input;
  playerID_in?: ID_Input[] | ID_Input;
  playerID_not_in?: ID_Input[] | ID_Input;
  playerID_lt?: ID_Input;
  playerID_lte?: ID_Input;
  playerID_gt?: ID_Input;
  playerID_gte?: ID_Input;
  playerID_contains?: ID_Input;
  playerID_not_contains?: ID_Input;
  playerID_starts_with?: ID_Input;
  playerID_not_starts_with?: ID_Input;
  playerID_ends_with?: ID_Input;
  playerID_not_ends_with?: ID_Input;
  yearID?: String;
  yearID_not?: String;
  yearID_in?: String[] | String;
  yearID_not_in?: String[] | String;
  yearID_lt?: String;
  yearID_lte?: String;
  yearID_gt?: String;
  yearID_gte?: String;
  yearID_contains?: String;
  yearID_not_contains?: String;
  yearID_starts_with?: String;
  yearID_not_starts_with?: String;
  yearID_ends_with?: String;
  yearID_not_ends_with?: String;
  stint?: String;
  stint_not?: String;
  stint_in?: String[] | String;
  stint_not_in?: String[] | String;
  stint_lt?: String;
  stint_lte?: String;
  stint_gt?: String;
  stint_gte?: String;
  stint_contains?: String;
  stint_not_contains?: String;
  stint_starts_with?: String;
  stint_not_starts_with?: String;
  stint_ends_with?: String;
  stint_not_ends_with?: String;
  teamID?: String;
  teamID_not?: String;
  teamID_in?: String[] | String;
  teamID_not_in?: String[] | String;
  teamID_lt?: String;
  teamID_lte?: String;
  teamID_gt?: String;
  teamID_gte?: String;
  teamID_contains?: String;
  teamID_not_contains?: String;
  teamID_starts_with?: String;
  teamID_not_starts_with?: String;
  teamID_ends_with?: String;
  teamID_not_ends_with?: String;
  lgID?: String;
  lgID_not?: String;
  lgID_in?: String[] | String;
  lgID_not_in?: String[] | String;
  lgID_lt?: String;
  lgID_lte?: String;
  lgID_gt?: String;
  lgID_gte?: String;
  lgID_contains?: String;
  lgID_not_contains?: String;
  lgID_starts_with?: String;
  lgID_not_starts_with?: String;
  lgID_ends_with?: String;
  lgID_not_ends_with?: String;
  W?: Int;
  W_not?: Int;
  W_in?: Int[] | Int;
  W_not_in?: Int[] | Int;
  W_lt?: Int;
  W_lte?: Int;
  W_gt?: Int;
  W_gte?: Int;
  L?: Int;
  L_not?: Int;
  L_in?: Int[] | Int;
  L_not_in?: Int[] | Int;
  L_lt?: Int;
  L_lte?: Int;
  L_gt?: Int;
  L_gte?: Int;
  G?: Int;
  G_not?: Int;
  G_in?: Int[] | Int;
  G_not_in?: Int[] | Int;
  G_lt?: Int;
  G_lte?: Int;
  G_gt?: Int;
  G_gte?: Int;
  GS?: Int;
  GS_not?: Int;
  GS_in?: Int[] | Int;
  GS_not_in?: Int[] | Int;
  GS_lt?: Int;
  GS_lte?: Int;
  GS_gt?: Int;
  GS_gte?: Int;
  CG?: Int;
  CG_not?: Int;
  CG_in?: Int[] | Int;
  CG_not_in?: Int[] | Int;
  CG_lt?: Int;
  CG_lte?: Int;
  CG_gt?: Int;
  CG_gte?: Int;
  SHO?: Int;
  SHO_not?: Int;
  SHO_in?: Int[] | Int;
  SHO_not_in?: Int[] | Int;
  SHO_lt?: Int;
  SHO_lte?: Int;
  SHO_gt?: Int;
  SHO_gte?: Int;
  SV?: Int;
  SV_not?: Int;
  SV_in?: Int[] | Int;
  SV_not_in?: Int[] | Int;
  SV_lt?: Int;
  SV_lte?: Int;
  SV_gt?: Int;
  SV_gte?: Int;
  IPouts?: Int;
  IPouts_not?: Int;
  IPouts_in?: Int[] | Int;
  IPouts_not_in?: Int[] | Int;
  IPouts_lt?: Int;
  IPouts_lte?: Int;
  IPouts_gt?: Int;
  IPouts_gte?: Int;
  H?: Int;
  H_not?: Int;
  H_in?: Int[] | Int;
  H_not_in?: Int[] | Int;
  H_lt?: Int;
  H_lte?: Int;
  H_gt?: Int;
  H_gte?: Int;
  ER?: Int;
  ER_not?: Int;
  ER_in?: Int[] | Int;
  ER_not_in?: Int[] | Int;
  ER_lt?: Int;
  ER_lte?: Int;
  ER_gt?: Int;
  ER_gte?: Int;
  HR?: Int;
  HR_not?: Int;
  HR_in?: Int[] | Int;
  HR_not_in?: Int[] | Int;
  HR_lt?: Int;
  HR_lte?: Int;
  HR_gt?: Int;
  HR_gte?: Int;
  BB?: Int;
  BB_not?: Int;
  BB_in?: Int[] | Int;
  BB_not_in?: Int[] | Int;
  BB_lt?: Int;
  BB_lte?: Int;
  BB_gt?: Int;
  BB_gte?: Int;
  SO?: Int;
  SO_not?: Int;
  SO_in?: Int[] | Int;
  SO_not_in?: Int[] | Int;
  SO_lt?: Int;
  SO_lte?: Int;
  SO_gt?: Int;
  SO_gte?: Int;
  BAOpp?: Int;
  BAOpp_not?: Int;
  BAOpp_in?: Int[] | Int;
  BAOpp_not_in?: Int[] | Int;
  BAOpp_lt?: Int;
  BAOpp_lte?: Int;
  BAOpp_gt?: Int;
  BAOpp_gte?: Int;
  ERA?: Float;
  ERA_not?: Float;
  ERA_in?: Float[] | Float;
  ERA_not_in?: Float[] | Float;
  ERA_lt?: Float;
  ERA_lte?: Float;
  ERA_gt?: Float;
  ERA_gte?: Float;
  IBB?: Int;
  IBB_not?: Int;
  IBB_in?: Int[] | Int;
  IBB_not_in?: Int[] | Int;
  IBB_lt?: Int;
  IBB_lte?: Int;
  IBB_gt?: Int;
  IBB_gte?: Int;
  WP?: Int;
  WP_not?: Int;
  WP_in?: Int[] | Int;
  WP_not_in?: Int[] | Int;
  WP_lt?: Int;
  WP_lte?: Int;
  WP_gt?: Int;
  WP_gte?: Int;
  HBP?: Int;
  HBP_not?: Int;
  HBP_in?: Int[] | Int;
  HBP_not_in?: Int[] | Int;
  HBP_lt?: Int;
  HBP_lte?: Int;
  HBP_gt?: Int;
  HBP_gte?: Int;
  BK?: Int;
  BK_not?: Int;
  BK_in?: Int[] | Int;
  BK_not_in?: Int[] | Int;
  BK_lt?: Int;
  BK_lte?: Int;
  BK_gt?: Int;
  BK_gte?: Int;
  BFP?: Int;
  BFP_not?: Int;
  BFP_in?: Int[] | Int;
  BFP_not_in?: Int[] | Int;
  BFP_lt?: Int;
  BFP_lte?: Int;
  BFP_gt?: Int;
  BFP_gte?: Int;
  GF?: Int;
  GF_not?: Int;
  GF_in?: Int[] | Int;
  GF_not_in?: Int[] | Int;
  GF_lt?: Int;
  GF_lte?: Int;
  GF_gt?: Int;
  GF_gte?: Int;
  R?: Int;
  R_not?: Int;
  R_in?: Int[] | Int;
  R_not_in?: Int[] | Int;
  R_lt?: Int;
  R_lte?: Int;
  R_gt?: Int;
  R_gte?: Int;
  SH?: Int;
  SH_not?: Int;
  SH_in?: Int[] | Int;
  SH_not_in?: Int[] | Int;
  SH_lt?: Int;
  SH_lte?: Int;
  SH_gt?: Int;
  SH_gte?: Int;
  SF?: Int;
  SF_not?: Int;
  SF_in?: Int[] | Int;
  SF_not_in?: Int[] | Int;
  SF_lt?: Int;
  SF_lte?: Int;
  SF_gt?: Int;
  SF_gte?: Int;
  GIDP?: Int;
  GIDP_not?: Int;
  GIDP_in?: Int[] | Int;
  GIDP_not_in?: Int[] | Int;
  GIDP_lt?: Int;
  GIDP_lte?: Int;
  GIDP_gt?: Int;
  GIDP_gte?: Int;
  AND?: PitchingWhereInput[] | PitchingWhereInput;
  OR?: PitchingWhereInput[] | PitchingWhereInput;
  NOT?: PitchingWhereInput[] | PitchingWhereInput;
}

export interface BattingUpdateManyInput {
  create?: BattingCreateInput[] | BattingCreateInput;
  deleteMany?: BattingScalarWhereInput[] | BattingScalarWhereInput;
  updateMany?:
    | BattingUpdateManyWithWhereNestedInput[]
    | BattingUpdateManyWithWhereNestedInput;
}

export interface PitchingUpdateManyDataInput {
  playerID?: ID_Input;
  yearID?: String;
  stint?: String;
  teamID?: String;
  lgID?: String;
  W?: Int;
  L?: Int;
  G?: Int;
  GS?: Int;
  CG?: Int;
  SHO?: Int;
  SV?: Int;
  IPouts?: Int;
  H?: Int;
  ER?: Int;
  HR?: Int;
  BB?: Int;
  SO?: Int;
  BAOpp?: Int;
  ERA?: Float;
  IBB?: Int;
  WP?: Int;
  HBP?: Int;
  BK?: Int;
  BFP?: Int;
  GF?: Int;
  R?: Int;
  SH?: Int;
  SF?: Int;
  GIDP?: Int;
}

export interface PersonUpdateInput {
  playerID?: ID_Input;
  birthYear?: String;
  birthMonth?: String;
  birthDay?: String;
  birthCountry?: String;
  birthState?: String;
  birthCity?: String;
  deathYear?: String;
  deathMonth?: String;
  deathDay?: String;
  deathCountry?: String;
  deathState?: String;
  deathCity?: String;
  nameFirst?: String;
  nameLast?: String;
  nameGiven?: String;
  weight?: String;
  height?: String;
  bats?: String;
  throws?: String;
  debut?: String;
  finalGame?: String;
  retroID?: String;
  bbrefID?: String;
  batting?: BattingUpdateManyInput;
  pitching?: PitchingUpdateManyInput;
}

export interface PersonWhereInput {
  playerID?: ID_Input;
  playerID_not?: ID_Input;
  playerID_in?: ID_Input[] | ID_Input;
  playerID_not_in?: ID_Input[] | ID_Input;
  playerID_lt?: ID_Input;
  playerID_lte?: ID_Input;
  playerID_gt?: ID_Input;
  playerID_gte?: ID_Input;
  playerID_contains?: ID_Input;
  playerID_not_contains?: ID_Input;
  playerID_starts_with?: ID_Input;
  playerID_not_starts_with?: ID_Input;
  playerID_ends_with?: ID_Input;
  playerID_not_ends_with?: ID_Input;
  birthYear?: String;
  birthYear_not?: String;
  birthYear_in?: String[] | String;
  birthYear_not_in?: String[] | String;
  birthYear_lt?: String;
  birthYear_lte?: String;
  birthYear_gt?: String;
  birthYear_gte?: String;
  birthYear_contains?: String;
  birthYear_not_contains?: String;
  birthYear_starts_with?: String;
  birthYear_not_starts_with?: String;
  birthYear_ends_with?: String;
  birthYear_not_ends_with?: String;
  birthMonth?: String;
  birthMonth_not?: String;
  birthMonth_in?: String[] | String;
  birthMonth_not_in?: String[] | String;
  birthMonth_lt?: String;
  birthMonth_lte?: String;
  birthMonth_gt?: String;
  birthMonth_gte?: String;
  birthMonth_contains?: String;
  birthMonth_not_contains?: String;
  birthMonth_starts_with?: String;
  birthMonth_not_starts_with?: String;
  birthMonth_ends_with?: String;
  birthMonth_not_ends_with?: String;
  birthDay?: String;
  birthDay_not?: String;
  birthDay_in?: String[] | String;
  birthDay_not_in?: String[] | String;
  birthDay_lt?: String;
  birthDay_lte?: String;
  birthDay_gt?: String;
  birthDay_gte?: String;
  birthDay_contains?: String;
  birthDay_not_contains?: String;
  birthDay_starts_with?: String;
  birthDay_not_starts_with?: String;
  birthDay_ends_with?: String;
  birthDay_not_ends_with?: String;
  birthCountry?: String;
  birthCountry_not?: String;
  birthCountry_in?: String[] | String;
  birthCountry_not_in?: String[] | String;
  birthCountry_lt?: String;
  birthCountry_lte?: String;
  birthCountry_gt?: String;
  birthCountry_gte?: String;
  birthCountry_contains?: String;
  birthCountry_not_contains?: String;
  birthCountry_starts_with?: String;
  birthCountry_not_starts_with?: String;
  birthCountry_ends_with?: String;
  birthCountry_not_ends_with?: String;
  birthState?: String;
  birthState_not?: String;
  birthState_in?: String[] | String;
  birthState_not_in?: String[] | String;
  birthState_lt?: String;
  birthState_lte?: String;
  birthState_gt?: String;
  birthState_gte?: String;
  birthState_contains?: String;
  birthState_not_contains?: String;
  birthState_starts_with?: String;
  birthState_not_starts_with?: String;
  birthState_ends_with?: String;
  birthState_not_ends_with?: String;
  birthCity?: String;
  birthCity_not?: String;
  birthCity_in?: String[] | String;
  birthCity_not_in?: String[] | String;
  birthCity_lt?: String;
  birthCity_lte?: String;
  birthCity_gt?: String;
  birthCity_gte?: String;
  birthCity_contains?: String;
  birthCity_not_contains?: String;
  birthCity_starts_with?: String;
  birthCity_not_starts_with?: String;
  birthCity_ends_with?: String;
  birthCity_not_ends_with?: String;
  deathYear?: String;
  deathYear_not?: String;
  deathYear_in?: String[] | String;
  deathYear_not_in?: String[] | String;
  deathYear_lt?: String;
  deathYear_lte?: String;
  deathYear_gt?: String;
  deathYear_gte?: String;
  deathYear_contains?: String;
  deathYear_not_contains?: String;
  deathYear_starts_with?: String;
  deathYear_not_starts_with?: String;
  deathYear_ends_with?: String;
  deathYear_not_ends_with?: String;
  deathMonth?: String;
  deathMonth_not?: String;
  deathMonth_in?: String[] | String;
  deathMonth_not_in?: String[] | String;
  deathMonth_lt?: String;
  deathMonth_lte?: String;
  deathMonth_gt?: String;
  deathMonth_gte?: String;
  deathMonth_contains?: String;
  deathMonth_not_contains?: String;
  deathMonth_starts_with?: String;
  deathMonth_not_starts_with?: String;
  deathMonth_ends_with?: String;
  deathMonth_not_ends_with?: String;
  deathDay?: String;
  deathDay_not?: String;
  deathDay_in?: String[] | String;
  deathDay_not_in?: String[] | String;
  deathDay_lt?: String;
  deathDay_lte?: String;
  deathDay_gt?: String;
  deathDay_gte?: String;
  deathDay_contains?: String;
  deathDay_not_contains?: String;
  deathDay_starts_with?: String;
  deathDay_not_starts_with?: String;
  deathDay_ends_with?: String;
  deathDay_not_ends_with?: String;
  deathCountry?: String;
  deathCountry_not?: String;
  deathCountry_in?: String[] | String;
  deathCountry_not_in?: String[] | String;
  deathCountry_lt?: String;
  deathCountry_lte?: String;
  deathCountry_gt?: String;
  deathCountry_gte?: String;
  deathCountry_contains?: String;
  deathCountry_not_contains?: String;
  deathCountry_starts_with?: String;
  deathCountry_not_starts_with?: String;
  deathCountry_ends_with?: String;
  deathCountry_not_ends_with?: String;
  deathState?: String;
  deathState_not?: String;
  deathState_in?: String[] | String;
  deathState_not_in?: String[] | String;
  deathState_lt?: String;
  deathState_lte?: String;
  deathState_gt?: String;
  deathState_gte?: String;
  deathState_contains?: String;
  deathState_not_contains?: String;
  deathState_starts_with?: String;
  deathState_not_starts_with?: String;
  deathState_ends_with?: String;
  deathState_not_ends_with?: String;
  deathCity?: String;
  deathCity_not?: String;
  deathCity_in?: String[] | String;
  deathCity_not_in?: String[] | String;
  deathCity_lt?: String;
  deathCity_lte?: String;
  deathCity_gt?: String;
  deathCity_gte?: String;
  deathCity_contains?: String;
  deathCity_not_contains?: String;
  deathCity_starts_with?: String;
  deathCity_not_starts_with?: String;
  deathCity_ends_with?: String;
  deathCity_not_ends_with?: String;
  nameFirst?: String;
  nameFirst_not?: String;
  nameFirst_in?: String[] | String;
  nameFirst_not_in?: String[] | String;
  nameFirst_lt?: String;
  nameFirst_lte?: String;
  nameFirst_gt?: String;
  nameFirst_gte?: String;
  nameFirst_contains?: String;
  nameFirst_not_contains?: String;
  nameFirst_starts_with?: String;
  nameFirst_not_starts_with?: String;
  nameFirst_ends_with?: String;
  nameFirst_not_ends_with?: String;
  nameLast?: String;
  nameLast_not?: String;
  nameLast_in?: String[] | String;
  nameLast_not_in?: String[] | String;
  nameLast_lt?: String;
  nameLast_lte?: String;
  nameLast_gt?: String;
  nameLast_gte?: String;
  nameLast_contains?: String;
  nameLast_not_contains?: String;
  nameLast_starts_with?: String;
  nameLast_not_starts_with?: String;
  nameLast_ends_with?: String;
  nameLast_not_ends_with?: String;
  nameGiven?: String;
  nameGiven_not?: String;
  nameGiven_in?: String[] | String;
  nameGiven_not_in?: String[] | String;
  nameGiven_lt?: String;
  nameGiven_lte?: String;
  nameGiven_gt?: String;
  nameGiven_gte?: String;
  nameGiven_contains?: String;
  nameGiven_not_contains?: String;
  nameGiven_starts_with?: String;
  nameGiven_not_starts_with?: String;
  nameGiven_ends_with?: String;
  nameGiven_not_ends_with?: String;
  weight?: String;
  weight_not?: String;
  weight_in?: String[] | String;
  weight_not_in?: String[] | String;
  weight_lt?: String;
  weight_lte?: String;
  weight_gt?: String;
  weight_gte?: String;
  weight_contains?: String;
  weight_not_contains?: String;
  weight_starts_with?: String;
  weight_not_starts_with?: String;
  weight_ends_with?: String;
  weight_not_ends_with?: String;
  height?: String;
  height_not?: String;
  height_in?: String[] | String;
  height_not_in?: String[] | String;
  height_lt?: String;
  height_lte?: String;
  height_gt?: String;
  height_gte?: String;
  height_contains?: String;
  height_not_contains?: String;
  height_starts_with?: String;
  height_not_starts_with?: String;
  height_ends_with?: String;
  height_not_ends_with?: String;
  bats?: String;
  bats_not?: String;
  bats_in?: String[] | String;
  bats_not_in?: String[] | String;
  bats_lt?: String;
  bats_lte?: String;
  bats_gt?: String;
  bats_gte?: String;
  bats_contains?: String;
  bats_not_contains?: String;
  bats_starts_with?: String;
  bats_not_starts_with?: String;
  bats_ends_with?: String;
  bats_not_ends_with?: String;
  throws?: String;
  throws_not?: String;
  throws_in?: String[] | String;
  throws_not_in?: String[] | String;
  throws_lt?: String;
  throws_lte?: String;
  throws_gt?: String;
  throws_gte?: String;
  throws_contains?: String;
  throws_not_contains?: String;
  throws_starts_with?: String;
  throws_not_starts_with?: String;
  throws_ends_with?: String;
  throws_not_ends_with?: String;
  debut?: String;
  debut_not?: String;
  debut_in?: String[] | String;
  debut_not_in?: String[] | String;
  debut_lt?: String;
  debut_lte?: String;
  debut_gt?: String;
  debut_gte?: String;
  debut_contains?: String;
  debut_not_contains?: String;
  debut_starts_with?: String;
  debut_not_starts_with?: String;
  debut_ends_with?: String;
  debut_not_ends_with?: String;
  finalGame?: String;
  finalGame_not?: String;
  finalGame_in?: String[] | String;
  finalGame_not_in?: String[] | String;
  finalGame_lt?: String;
  finalGame_lte?: String;
  finalGame_gt?: String;
  finalGame_gte?: String;
  finalGame_contains?: String;
  finalGame_not_contains?: String;
  finalGame_starts_with?: String;
  finalGame_not_starts_with?: String;
  finalGame_ends_with?: String;
  finalGame_not_ends_with?: String;
  retroID?: String;
  retroID_not?: String;
  retroID_in?: String[] | String;
  retroID_not_in?: String[] | String;
  retroID_lt?: String;
  retroID_lte?: String;
  retroID_gt?: String;
  retroID_gte?: String;
  retroID_contains?: String;
  retroID_not_contains?: String;
  retroID_starts_with?: String;
  retroID_not_starts_with?: String;
  retroID_ends_with?: String;
  retroID_not_ends_with?: String;
  bbrefID?: String;
  bbrefID_not?: String;
  bbrefID_in?: String[] | String;
  bbrefID_not_in?: String[] | String;
  bbrefID_lt?: String;
  bbrefID_lte?: String;
  bbrefID_gt?: String;
  bbrefID_gte?: String;
  bbrefID_contains?: String;
  bbrefID_not_contains?: String;
  bbrefID_starts_with?: String;
  bbrefID_not_starts_with?: String;
  bbrefID_ends_with?: String;
  bbrefID_not_ends_with?: String;
  batting_every?: BattingWhereInput;
  batting_some?: BattingWhereInput;
  batting_none?: BattingWhereInput;
  pitching_every?: PitchingWhereInput;
  pitching_some?: PitchingWhereInput;
  pitching_none?: PitchingWhereInput;
  AND?: PersonWhereInput[] | PersonWhereInput;
  OR?: PersonWhereInput[] | PersonWhereInput;
  NOT?: PersonWhereInput[] | PersonWhereInput;
}

export interface BattingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BattingWhereInput;
  AND?: BattingSubscriptionWhereInput[] | BattingSubscriptionWhereInput;
  OR?: BattingSubscriptionWhereInput[] | BattingSubscriptionWhereInput;
  NOT?: BattingSubscriptionWhereInput[] | BattingSubscriptionWhereInput;
}

export interface PitchingCreateManyInput {
  create?: PitchingCreateInput[] | PitchingCreateInput;
}

export interface PitchingCreateInput {
  playerID: ID_Input;
  yearID?: String;
  stint?: String;
  teamID?: String;
  lgID?: String;
  W?: Int;
  L?: Int;
  G?: Int;
  GS?: Int;
  CG?: Int;
  SHO?: Int;
  SV?: Int;
  IPouts?: Int;
  H?: Int;
  ER?: Int;
  HR?: Int;
  BB?: Int;
  SO?: Int;
  BAOpp?: Int;
  ERA?: Float;
  IBB?: Int;
  WP?: Int;
  HBP?: Int;
  BK?: Int;
  BFP?: Int;
  GF?: Int;
  R?: Int;
  SH?: Int;
  SF?: Int;
  GIDP?: Int;
}

export interface BattingCreateInput {
  playerID: ID_Input;
  yearID?: String;
  stint?: String;
  teamID?: String;
  lgID?: String;
  G?: Int;
  AB?: Int;
  R?: Int;
  H?: Int;
  Double?: Int;
  Triple?: Int;
  HR?: Int;
  RBI?: Int;
  SB?: Int;
  CS?: Int;
  BB?: Int;
  SO?: Int;
  IBB?: Int;
  HBP?: Int;
  SH?: Int;
  SF?: Int;
  GIDP?: Int;
}

export interface PitchingUpdateManyMutationInput {
  playerID?: ID_Input;
  yearID?: String;
  stint?: String;
  teamID?: String;
  lgID?: String;
  W?: Int;
  L?: Int;
  G?: Int;
  GS?: Int;
  CG?: Int;
  SHO?: Int;
  SV?: Int;
  IPouts?: Int;
  H?: Int;
  ER?: Int;
  HR?: Int;
  BB?: Int;
  SO?: Int;
  BAOpp?: Int;
  ERA?: Float;
  IBB?: Int;
  WP?: Int;
  HBP?: Int;
  BK?: Int;
  BFP?: Int;
  GF?: Int;
  R?: Int;
  SH?: Int;
  SF?: Int;
  GIDP?: Int;
}

export interface PitchingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PitchingWhereInput;
  AND?: PitchingSubscriptionWhereInput[] | PitchingSubscriptionWhereInput;
  OR?: PitchingSubscriptionWhereInput[] | PitchingSubscriptionWhereInput;
  NOT?: PitchingSubscriptionWhereInput[] | PitchingSubscriptionWhereInput;
}

export interface PitchingUpdateManyWithWhereNestedInput {
  where: PitchingScalarWhereInput;
  data: PitchingUpdateManyDataInput;
}

export interface PersonUpdateManyMutationInput {
  playerID?: ID_Input;
  birthYear?: String;
  birthMonth?: String;
  birthDay?: String;
  birthCountry?: String;
  birthState?: String;
  birthCity?: String;
  deathYear?: String;
  deathMonth?: String;
  deathDay?: String;
  deathCountry?: String;
  deathState?: String;
  deathCity?: String;
  nameFirst?: String;
  nameLast?: String;
  nameGiven?: String;
  weight?: String;
  height?: String;
  bats?: String;
  throws?: String;
  debut?: String;
  finalGame?: String;
  retroID?: String;
  bbrefID?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface PitchingPreviousValues {
  playerID: ID_Output;
  yearID?: String;
  stint?: String;
  teamID?: String;
  lgID?: String;
  W?: Int;
  L?: Int;
  G?: Int;
  GS?: Int;
  CG?: Int;
  SHO?: Int;
  SV?: Int;
  IPouts?: Int;
  H?: Int;
  ER?: Int;
  HR?: Int;
  BB?: Int;
  SO?: Int;
  BAOpp?: Int;
  ERA?: Float;
  IBB?: Int;
  WP?: Int;
  HBP?: Int;
  BK?: Int;
  BFP?: Int;
  GF?: Int;
  R?: Int;
  SH?: Int;
  SF?: Int;
  GIDP?: Int;
}

export interface PitchingPreviousValuesPromise
  extends Promise<PitchingPreviousValues>,
    Fragmentable {
  playerID: () => Promise<ID_Output>;
  yearID: () => Promise<String>;
  stint: () => Promise<String>;
  teamID: () => Promise<String>;
  lgID: () => Promise<String>;
  W: () => Promise<Int>;
  L: () => Promise<Int>;
  G: () => Promise<Int>;
  GS: () => Promise<Int>;
  CG: () => Promise<Int>;
  SHO: () => Promise<Int>;
  SV: () => Promise<Int>;
  IPouts: () => Promise<Int>;
  H: () => Promise<Int>;
  ER: () => Promise<Int>;
  HR: () => Promise<Int>;
  BB: () => Promise<Int>;
  SO: () => Promise<Int>;
  BAOpp: () => Promise<Int>;
  ERA: () => Promise<Float>;
  IBB: () => Promise<Int>;
  WP: () => Promise<Int>;
  HBP: () => Promise<Int>;
  BK: () => Promise<Int>;
  BFP: () => Promise<Int>;
  GF: () => Promise<Int>;
  R: () => Promise<Int>;
  SH: () => Promise<Int>;
  SF: () => Promise<Int>;
  GIDP: () => Promise<Int>;
}

export interface PitchingPreviousValuesSubscription
  extends Promise<AsyncIterator<PitchingPreviousValues>>,
    Fragmentable {
  playerID: () => Promise<AsyncIterator<ID_Output>>;
  yearID: () => Promise<AsyncIterator<String>>;
  stint: () => Promise<AsyncIterator<String>>;
  teamID: () => Promise<AsyncIterator<String>>;
  lgID: () => Promise<AsyncIterator<String>>;
  W: () => Promise<AsyncIterator<Int>>;
  L: () => Promise<AsyncIterator<Int>>;
  G: () => Promise<AsyncIterator<Int>>;
  GS: () => Promise<AsyncIterator<Int>>;
  CG: () => Promise<AsyncIterator<Int>>;
  SHO: () => Promise<AsyncIterator<Int>>;
  SV: () => Promise<AsyncIterator<Int>>;
  IPouts: () => Promise<AsyncIterator<Int>>;
  H: () => Promise<AsyncIterator<Int>>;
  ER: () => Promise<AsyncIterator<Int>>;
  HR: () => Promise<AsyncIterator<Int>>;
  BB: () => Promise<AsyncIterator<Int>>;
  SO: () => Promise<AsyncIterator<Int>>;
  BAOpp: () => Promise<AsyncIterator<Int>>;
  ERA: () => Promise<AsyncIterator<Float>>;
  IBB: () => Promise<AsyncIterator<Int>>;
  WP: () => Promise<AsyncIterator<Int>>;
  HBP: () => Promise<AsyncIterator<Int>>;
  BK: () => Promise<AsyncIterator<Int>>;
  BFP: () => Promise<AsyncIterator<Int>>;
  GF: () => Promise<AsyncIterator<Int>>;
  R: () => Promise<AsyncIterator<Int>>;
  SH: () => Promise<AsyncIterator<Int>>;
  SF: () => Promise<AsyncIterator<Int>>;
  GIDP: () => Promise<AsyncIterator<Int>>;
}

export interface Batting {
  playerID: ID_Output;
  yearID?: String;
  stint?: String;
  teamID?: String;
  lgID?: String;
  G?: Int;
  AB?: Int;
  R?: Int;
  H?: Int;
  Double?: Int;
  Triple?: Int;
  HR?: Int;
  RBI?: Int;
  SB?: Int;
  CS?: Int;
  BB?: Int;
  SO?: Int;
  IBB?: Int;
  HBP?: Int;
  SH?: Int;
  SF?: Int;
  GIDP?: Int;
}

export interface BattingPromise extends Promise<Batting>, Fragmentable {
  playerID: () => Promise<ID_Output>;
  yearID: () => Promise<String>;
  stint: () => Promise<String>;
  teamID: () => Promise<String>;
  lgID: () => Promise<String>;
  G: () => Promise<Int>;
  AB: () => Promise<Int>;
  R: () => Promise<Int>;
  H: () => Promise<Int>;
  Double: () => Promise<Int>;
  Triple: () => Promise<Int>;
  HR: () => Promise<Int>;
  RBI: () => Promise<Int>;
  SB: () => Promise<Int>;
  CS: () => Promise<Int>;
  BB: () => Promise<Int>;
  SO: () => Promise<Int>;
  IBB: () => Promise<Int>;
  HBP: () => Promise<Int>;
  SH: () => Promise<Int>;
  SF: () => Promise<Int>;
  GIDP: () => Promise<Int>;
}

export interface BattingSubscription
  extends Promise<AsyncIterator<Batting>>,
    Fragmentable {
  playerID: () => Promise<AsyncIterator<ID_Output>>;
  yearID: () => Promise<AsyncIterator<String>>;
  stint: () => Promise<AsyncIterator<String>>;
  teamID: () => Promise<AsyncIterator<String>>;
  lgID: () => Promise<AsyncIterator<String>>;
  G: () => Promise<AsyncIterator<Int>>;
  AB: () => Promise<AsyncIterator<Int>>;
  R: () => Promise<AsyncIterator<Int>>;
  H: () => Promise<AsyncIterator<Int>>;
  Double: () => Promise<AsyncIterator<Int>>;
  Triple: () => Promise<AsyncIterator<Int>>;
  HR: () => Promise<AsyncIterator<Int>>;
  RBI: () => Promise<AsyncIterator<Int>>;
  SB: () => Promise<AsyncIterator<Int>>;
  CS: () => Promise<AsyncIterator<Int>>;
  BB: () => Promise<AsyncIterator<Int>>;
  SO: () => Promise<AsyncIterator<Int>>;
  IBB: () => Promise<AsyncIterator<Int>>;
  HBP: () => Promise<AsyncIterator<Int>>;
  SH: () => Promise<AsyncIterator<Int>>;
  SF: () => Promise<AsyncIterator<Int>>;
  GIDP: () => Promise<AsyncIterator<Int>>;
}

export interface BattingConnection {
  pageInfo: PageInfo;
  edges: BattingEdge[];
}

export interface BattingConnectionPromise
  extends Promise<BattingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BattingEdge>>() => T;
  aggregate: <T = AggregateBattingPromise>() => T;
}

export interface BattingConnectionSubscription
  extends Promise<AsyncIterator<BattingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BattingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBattingSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Person {
  playerID: ID_Output;
  birthYear?: String;
  birthMonth?: String;
  birthDay?: String;
  birthCountry?: String;
  birthState?: String;
  birthCity?: String;
  deathYear?: String;
  deathMonth?: String;
  deathDay?: String;
  deathCountry?: String;
  deathState?: String;
  deathCity?: String;
  nameFirst?: String;
  nameLast?: String;
  nameGiven?: String;
  weight?: String;
  height?: String;
  bats?: String;
  throws?: String;
  debut?: String;
  finalGame?: String;
  retroID?: String;
  bbrefID?: String;
}

export interface PersonPromise extends Promise<Person>, Fragmentable {
  playerID: () => Promise<ID_Output>;
  birthYear: () => Promise<String>;
  birthMonth: () => Promise<String>;
  birthDay: () => Promise<String>;
  birthCountry: () => Promise<String>;
  birthState: () => Promise<String>;
  birthCity: () => Promise<String>;
  deathYear: () => Promise<String>;
  deathMonth: () => Promise<String>;
  deathDay: () => Promise<String>;
  deathCountry: () => Promise<String>;
  deathState: () => Promise<String>;
  deathCity: () => Promise<String>;
  nameFirst: () => Promise<String>;
  nameLast: () => Promise<String>;
  nameGiven: () => Promise<String>;
  weight: () => Promise<String>;
  height: () => Promise<String>;
  bats: () => Promise<String>;
  throws: () => Promise<String>;
  debut: () => Promise<String>;
  finalGame: () => Promise<String>;
  retroID: () => Promise<String>;
  bbrefID: () => Promise<String>;
  batting: <T = FragmentableArray<Batting>>(args?: {
    where?: BattingWhereInput;
    orderBy?: BattingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pitching: <T = FragmentableArray<Pitching>>(args?: {
    where?: PitchingWhereInput;
    orderBy?: PitchingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PersonSubscription
  extends Promise<AsyncIterator<Person>>,
    Fragmentable {
  playerID: () => Promise<AsyncIterator<ID_Output>>;
  birthYear: () => Promise<AsyncIterator<String>>;
  birthMonth: () => Promise<AsyncIterator<String>>;
  birthDay: () => Promise<AsyncIterator<String>>;
  birthCountry: () => Promise<AsyncIterator<String>>;
  birthState: () => Promise<AsyncIterator<String>>;
  birthCity: () => Promise<AsyncIterator<String>>;
  deathYear: () => Promise<AsyncIterator<String>>;
  deathMonth: () => Promise<AsyncIterator<String>>;
  deathDay: () => Promise<AsyncIterator<String>>;
  deathCountry: () => Promise<AsyncIterator<String>>;
  deathState: () => Promise<AsyncIterator<String>>;
  deathCity: () => Promise<AsyncIterator<String>>;
  nameFirst: () => Promise<AsyncIterator<String>>;
  nameLast: () => Promise<AsyncIterator<String>>;
  nameGiven: () => Promise<AsyncIterator<String>>;
  weight: () => Promise<AsyncIterator<String>>;
  height: () => Promise<AsyncIterator<String>>;
  bats: () => Promise<AsyncIterator<String>>;
  throws: () => Promise<AsyncIterator<String>>;
  debut: () => Promise<AsyncIterator<String>>;
  finalGame: () => Promise<AsyncIterator<String>>;
  retroID: () => Promise<AsyncIterator<String>>;
  bbrefID: () => Promise<AsyncIterator<String>>;
  batting: <T = Promise<AsyncIterator<BattingSubscription>>>(args?: {
    where?: BattingWhereInput;
    orderBy?: BattingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  pitching: <T = Promise<AsyncIterator<PitchingSubscription>>>(args?: {
    where?: PitchingWhereInput;
    orderBy?: PitchingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregatePitching {
  count: Int;
}

export interface AggregatePitchingPromise
  extends Promise<AggregatePitching>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePitchingSubscription
  extends Promise<AsyncIterator<AggregatePitching>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateBatting {
  count: Int;
}

export interface AggregateBattingPromise
  extends Promise<AggregateBatting>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBattingSubscription
  extends Promise<AsyncIterator<AggregateBatting>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PitchingConnection {
  pageInfo: PageInfo;
  edges: PitchingEdge[];
}

export interface PitchingConnectionPromise
  extends Promise<PitchingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PitchingEdge>>() => T;
  aggregate: <T = AggregatePitchingPromise>() => T;
}

export interface PitchingConnectionSubscription
  extends Promise<AsyncIterator<PitchingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PitchingEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePitchingSubscription>() => T;
}

export interface PitchingEdge {
  node: Pitching;
  cursor: String;
}

export interface PitchingEdgePromise
  extends Promise<PitchingEdge>,
    Fragmentable {
  node: <T = PitchingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PitchingEdgeSubscription
  extends Promise<AsyncIterator<PitchingEdge>>,
    Fragmentable {
  node: <T = PitchingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BattingEdge {
  node: Batting;
  cursor: String;
}

export interface BattingEdgePromise extends Promise<BattingEdge>, Fragmentable {
  node: <T = BattingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BattingEdgeSubscription
  extends Promise<AsyncIterator<BattingEdge>>,
    Fragmentable {
  node: <T = BattingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PersonEdge {
  node: Person;
  cursor: String;
}

export interface PersonEdgePromise extends Promise<PersonEdge>, Fragmentable {
  node: <T = PersonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PersonEdgeSubscription
  extends Promise<AsyncIterator<PersonEdge>>,
    Fragmentable {
  node: <T = PersonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BattingPreviousValues {
  playerID: ID_Output;
  yearID?: String;
  stint?: String;
  teamID?: String;
  lgID?: String;
  G?: Int;
  AB?: Int;
  R?: Int;
  H?: Int;
  Double?: Int;
  Triple?: Int;
  HR?: Int;
  RBI?: Int;
  SB?: Int;
  CS?: Int;
  BB?: Int;
  SO?: Int;
  IBB?: Int;
  HBP?: Int;
  SH?: Int;
  SF?: Int;
  GIDP?: Int;
}

export interface BattingPreviousValuesPromise
  extends Promise<BattingPreviousValues>,
    Fragmentable {
  playerID: () => Promise<ID_Output>;
  yearID: () => Promise<String>;
  stint: () => Promise<String>;
  teamID: () => Promise<String>;
  lgID: () => Promise<String>;
  G: () => Promise<Int>;
  AB: () => Promise<Int>;
  R: () => Promise<Int>;
  H: () => Promise<Int>;
  Double: () => Promise<Int>;
  Triple: () => Promise<Int>;
  HR: () => Promise<Int>;
  RBI: () => Promise<Int>;
  SB: () => Promise<Int>;
  CS: () => Promise<Int>;
  BB: () => Promise<Int>;
  SO: () => Promise<Int>;
  IBB: () => Promise<Int>;
  HBP: () => Promise<Int>;
  SH: () => Promise<Int>;
  SF: () => Promise<Int>;
  GIDP: () => Promise<Int>;
}

export interface BattingPreviousValuesSubscription
  extends Promise<AsyncIterator<BattingPreviousValues>>,
    Fragmentable {
  playerID: () => Promise<AsyncIterator<ID_Output>>;
  yearID: () => Promise<AsyncIterator<String>>;
  stint: () => Promise<AsyncIterator<String>>;
  teamID: () => Promise<AsyncIterator<String>>;
  lgID: () => Promise<AsyncIterator<String>>;
  G: () => Promise<AsyncIterator<Int>>;
  AB: () => Promise<AsyncIterator<Int>>;
  R: () => Promise<AsyncIterator<Int>>;
  H: () => Promise<AsyncIterator<Int>>;
  Double: () => Promise<AsyncIterator<Int>>;
  Triple: () => Promise<AsyncIterator<Int>>;
  HR: () => Promise<AsyncIterator<Int>>;
  RBI: () => Promise<AsyncIterator<Int>>;
  SB: () => Promise<AsyncIterator<Int>>;
  CS: () => Promise<AsyncIterator<Int>>;
  BB: () => Promise<AsyncIterator<Int>>;
  SO: () => Promise<AsyncIterator<Int>>;
  IBB: () => Promise<AsyncIterator<Int>>;
  HBP: () => Promise<AsyncIterator<Int>>;
  SH: () => Promise<AsyncIterator<Int>>;
  SF: () => Promise<AsyncIterator<Int>>;
  GIDP: () => Promise<AsyncIterator<Int>>;
}

export interface BattingSubscriptionPayload {
  mutation: MutationType;
  node: Batting;
  updatedFields: String[];
  previousValues: BattingPreviousValues;
}

export interface BattingSubscriptionPayloadPromise
  extends Promise<BattingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BattingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BattingPreviousValuesPromise>() => T;
}

export interface BattingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BattingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BattingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BattingPreviousValuesSubscription>() => T;
}

export interface PersonConnection {
  pageInfo: PageInfo;
  edges: PersonEdge[];
}

export interface PersonConnectionPromise
  extends Promise<PersonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PersonEdge>>() => T;
  aggregate: <T = AggregatePersonPromise>() => T;
}

export interface PersonConnectionSubscription
  extends Promise<AsyncIterator<PersonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PersonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePersonSubscription>() => T;
}

export interface AggregatePerson {
  count: Int;
}

export interface AggregatePersonPromise
  extends Promise<AggregatePerson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePersonSubscription
  extends Promise<AsyncIterator<AggregatePerson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PitchingSubscriptionPayload {
  mutation: MutationType;
  node: Pitching;
  updatedFields: String[];
  previousValues: PitchingPreviousValues;
}

export interface PitchingSubscriptionPayloadPromise
  extends Promise<PitchingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PitchingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PitchingPreviousValuesPromise>() => T;
}

export interface PitchingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PitchingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PitchingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PitchingPreviousValuesSubscription>() => T;
}

export interface PersonSubscriptionPayload {
  mutation: MutationType;
  node: Person;
  updatedFields: String[];
  previousValues: PersonPreviousValues;
}

export interface PersonSubscriptionPayloadPromise
  extends Promise<PersonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PersonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PersonPreviousValuesPromise>() => T;
}

export interface PersonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PersonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PersonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PersonPreviousValuesSubscription>() => T;
}

export interface PersonPreviousValues {
  playerID: ID_Output;
  birthYear?: String;
  birthMonth?: String;
  birthDay?: String;
  birthCountry?: String;
  birthState?: String;
  birthCity?: String;
  deathYear?: String;
  deathMonth?: String;
  deathDay?: String;
  deathCountry?: String;
  deathState?: String;
  deathCity?: String;
  nameFirst?: String;
  nameLast?: String;
  nameGiven?: String;
  weight?: String;
  height?: String;
  bats?: String;
  throws?: String;
  debut?: String;
  finalGame?: String;
  retroID?: String;
  bbrefID?: String;
}

export interface PersonPreviousValuesPromise
  extends Promise<PersonPreviousValues>,
    Fragmentable {
  playerID: () => Promise<ID_Output>;
  birthYear: () => Promise<String>;
  birthMonth: () => Promise<String>;
  birthDay: () => Promise<String>;
  birthCountry: () => Promise<String>;
  birthState: () => Promise<String>;
  birthCity: () => Promise<String>;
  deathYear: () => Promise<String>;
  deathMonth: () => Promise<String>;
  deathDay: () => Promise<String>;
  deathCountry: () => Promise<String>;
  deathState: () => Promise<String>;
  deathCity: () => Promise<String>;
  nameFirst: () => Promise<String>;
  nameLast: () => Promise<String>;
  nameGiven: () => Promise<String>;
  weight: () => Promise<String>;
  height: () => Promise<String>;
  bats: () => Promise<String>;
  throws: () => Promise<String>;
  debut: () => Promise<String>;
  finalGame: () => Promise<String>;
  retroID: () => Promise<String>;
  bbrefID: () => Promise<String>;
}

export interface PersonPreviousValuesSubscription
  extends Promise<AsyncIterator<PersonPreviousValues>>,
    Fragmentable {
  playerID: () => Promise<AsyncIterator<ID_Output>>;
  birthYear: () => Promise<AsyncIterator<String>>;
  birthMonth: () => Promise<AsyncIterator<String>>;
  birthDay: () => Promise<AsyncIterator<String>>;
  birthCountry: () => Promise<AsyncIterator<String>>;
  birthState: () => Promise<AsyncIterator<String>>;
  birthCity: () => Promise<AsyncIterator<String>>;
  deathYear: () => Promise<AsyncIterator<String>>;
  deathMonth: () => Promise<AsyncIterator<String>>;
  deathDay: () => Promise<AsyncIterator<String>>;
  deathCountry: () => Promise<AsyncIterator<String>>;
  deathState: () => Promise<AsyncIterator<String>>;
  deathCity: () => Promise<AsyncIterator<String>>;
  nameFirst: () => Promise<AsyncIterator<String>>;
  nameLast: () => Promise<AsyncIterator<String>>;
  nameGiven: () => Promise<AsyncIterator<String>>;
  weight: () => Promise<AsyncIterator<String>>;
  height: () => Promise<AsyncIterator<String>>;
  bats: () => Promise<AsyncIterator<String>>;
  throws: () => Promise<AsyncIterator<String>>;
  debut: () => Promise<AsyncIterator<String>>;
  finalGame: () => Promise<AsyncIterator<String>>;
  retroID: () => Promise<AsyncIterator<String>>;
  bbrefID: () => Promise<AsyncIterator<String>>;
}

export interface Pitching {
  playerID: ID_Output;
  yearID?: String;
  stint?: String;
  teamID?: String;
  lgID?: String;
  W?: Int;
  L?: Int;
  G?: Int;
  GS?: Int;
  CG?: Int;
  SHO?: Int;
  SV?: Int;
  IPouts?: Int;
  H?: Int;
  ER?: Int;
  HR?: Int;
  BB?: Int;
  SO?: Int;
  BAOpp?: Int;
  ERA?: Float;
  IBB?: Int;
  WP?: Int;
  HBP?: Int;
  BK?: Int;
  BFP?: Int;
  GF?: Int;
  R?: Int;
  SH?: Int;
  SF?: Int;
  GIDP?: Int;
}

export interface PitchingPromise extends Promise<Pitching>, Fragmentable {
  playerID: () => Promise<ID_Output>;
  yearID: () => Promise<String>;
  stint: () => Promise<String>;
  teamID: () => Promise<String>;
  lgID: () => Promise<String>;
  W: () => Promise<Int>;
  L: () => Promise<Int>;
  G: () => Promise<Int>;
  GS: () => Promise<Int>;
  CG: () => Promise<Int>;
  SHO: () => Promise<Int>;
  SV: () => Promise<Int>;
  IPouts: () => Promise<Int>;
  H: () => Promise<Int>;
  ER: () => Promise<Int>;
  HR: () => Promise<Int>;
  BB: () => Promise<Int>;
  SO: () => Promise<Int>;
  BAOpp: () => Promise<Int>;
  ERA: () => Promise<Float>;
  IBB: () => Promise<Int>;
  WP: () => Promise<Int>;
  HBP: () => Promise<Int>;
  BK: () => Promise<Int>;
  BFP: () => Promise<Int>;
  GF: () => Promise<Int>;
  R: () => Promise<Int>;
  SH: () => Promise<Int>;
  SF: () => Promise<Int>;
  GIDP: () => Promise<Int>;
}

export interface PitchingSubscription
  extends Promise<AsyncIterator<Pitching>>,
    Fragmentable {
  playerID: () => Promise<AsyncIterator<ID_Output>>;
  yearID: () => Promise<AsyncIterator<String>>;
  stint: () => Promise<AsyncIterator<String>>;
  teamID: () => Promise<AsyncIterator<String>>;
  lgID: () => Promise<AsyncIterator<String>>;
  W: () => Promise<AsyncIterator<Int>>;
  L: () => Promise<AsyncIterator<Int>>;
  G: () => Promise<AsyncIterator<Int>>;
  GS: () => Promise<AsyncIterator<Int>>;
  CG: () => Promise<AsyncIterator<Int>>;
  SHO: () => Promise<AsyncIterator<Int>>;
  SV: () => Promise<AsyncIterator<Int>>;
  IPouts: () => Promise<AsyncIterator<Int>>;
  H: () => Promise<AsyncIterator<Int>>;
  ER: () => Promise<AsyncIterator<Int>>;
  HR: () => Promise<AsyncIterator<Int>>;
  BB: () => Promise<AsyncIterator<Int>>;
  SO: () => Promise<AsyncIterator<Int>>;
  BAOpp: () => Promise<AsyncIterator<Int>>;
  ERA: () => Promise<AsyncIterator<Float>>;
  IBB: () => Promise<AsyncIterator<Int>>;
  WP: () => Promise<AsyncIterator<Int>>;
  HBP: () => Promise<AsyncIterator<Int>>;
  BK: () => Promise<AsyncIterator<Int>>;
  BFP: () => Promise<AsyncIterator<Int>>;
  GF: () => Promise<AsyncIterator<Int>>;
  R: () => Promise<AsyncIterator<Int>>;
  SH: () => Promise<AsyncIterator<Int>>;
  SF: () => Promise<AsyncIterator<Int>>;
  GIDP: () => Promise<AsyncIterator<Int>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'Batting',
    embedded: false,
  },
  {
    name: 'Person',
    embedded: false,
  },
  {
    name: 'Pitching',
    embedded: false,
  },
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`,
});
export const prisma = new Prisma();
